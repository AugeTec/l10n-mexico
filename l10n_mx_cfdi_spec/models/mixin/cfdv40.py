# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

__NAMESPACE__ = "http://www.sat.gob.mx/cfd/4"


class Comprobante(models.AbstractModel):
    "Estándar de Comprobante Fiscal Digital por Internet."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.comprobante"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante"

    l10n_mx_cfdi4_0_informacion_global = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.informacionglobal",
        string="InformacionGlobal",
        help=(
            "Nodo condicional para precisar la información relacionada con el "
            "comprobante global."
        ),
    )

    l10n_mx_cfdi4_0_cfdi_relacionados = fields.One2many(
        "l10n_mx_cfdi.4_0.cfdirelacionados",
        "l10n_mx_cfdi4_0_cfdi_relacionados_comprobante_id",
        string="CfdiRelacionados",
        help=(
            "Nodo opcional para precisar la información de los comprobantes "
            "relacionados."
        ),
    )

    l10n_mx_cfdi4_0_emisor = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.emisor",
        string="Emisor",
        xsd_required=True,
        help=(
            "Nodo requerido para expresar la información del contribuyente "
            "emisor del comprobante."
        ),
    )

    l10n_mx_cfdi4_0_receptor = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.receptor",
        string="Receptor",
        xsd_required=True,
        help=(
            "Nodo requerido para precisar la información del contribuyente "
            "receptor del comprobante."
        ),
    )

    l10n_mx_cfdi4_0_conceptos = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.conceptos",
        string="Conceptos",
        xsd_required=True,
        help=(
            "Nodo requerido para listar los conceptos cubiertos por el " "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_impuestos = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.impuestos",
        string="Impuestos",
        help=(
            "Nodo condicional para expresar el resumen de los impuestos " "aplicables."
        ),
    )

    l10n_mx_cfdi4_0_complemento = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.complemento",
        string="Complemento",
        help=(
            "Nodo opcional donde se incluye el complemento Timbre Fiscal "
            "Digital de manera obligatoria y los nodos complementarios "
            "determinados por el SAT, de acuerdo con las disposiciones "
            "particulares para un sector o actividad específica."
        ),
    )

    l10n_mx_cfdi4_0_addenda = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.addenda",
        string="Addenda",
        help=(
            "Nodo opcional para recibir las extensiones al presente formato "
            "que sean de utilidad al contribuyente. Para las reglas de uso del"
            " mismo, referirse al formato origen."
        ),
    )

    l10n_mx_cfdi4_0_version = fields.Char(
        string="Version",
        xsd_required=True,
        help=(
            "Atributo requerido con valor prefijado a 4.0 que indica la "
            "versión del estándar bajo el que se encuentra expresado el "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_serie = fields.Char(
        string="Serie",
        help=(
            "Atributo opcional para precisar la serie para control interno del"
            " contribuyente. Este atributo acepta una cadena de caracteres."
        ),
    )

    l10n_mx_cfdi4_0_folio = fields.Char(
        string="Folio",
        help=(
            "Atributo opcional para control interno del contribuyente que "
            "expresa el folio del comprobante, acepta una cadena de "
            "caracteres."
        ),
    )

    l10n_mx_cfdi4_0_fecha = fields.Char(
        string="Fecha",
        xsd_required=True,
        xsd_type="tdCFDI:t_FechaH",
        help=(
            "Atributo requerido para la expresión de la fecha y hora de "
            "expedición del Comprobante Fiscal Digital por Internet. Se "
            "expresa en la forma AAAA-MM-DDThh:mm:ss y debe corresponder con "
            "la hora local donde se expide el comprobante."
        ),
    )

    l10n_mx_cfdi4_0_sello = fields.Char(
        string="Sello",
        xsd_required=True,
        help=(
            "Atributo requerido para contener el sello digital del comprobante"
            " fiscal, al que hacen referencia las reglas de resolución "
            "miscelánea vigente. El sello debe ser expresado como una cadena "
            "de texto en formato Base 64."
        ),
    )

    l10n_mx_cfdi4_0_forma_pago = fields.Char(
        string="FormaPago",
        xsd_type="catCFDI:c_FormaPago",
        help=(
            "Atributo condicional para expresar la clave de la forma de pago "
            "de los bienes o servicios amparados por el comprobante."
        ),
    )

    l10n_mx_cfdi4_0_no_certificado = fields.Char(
        string="NoCertificado",
        xsd_required=True,
        help=(
            "Atributo requerido para expresar el número de serie del "
            "certificado de sello digital que ampara al comprobante, de "
            "acuerdo con el acuse correspondiente a 20 posiciones otorgado por"
            " el sistema del SAT."
        ),
    )

    l10n_mx_cfdi4_0_certificado = fields.Char(
        string="Certificado",
        xsd_required=True,
        help=(
            "Atributo requerido que sirve para incorporar el certificado de "
            "sello digital que ampara al comprobante, como texto en formato "
            "base 64."
        ),
    )

    l10n_mx_cfdi4_0_condiciones_de_pago = fields.Char(
        string="CondicionesDePago",
        help=(
            "Atributo condicional para expresar las condiciones comerciales "
            "aplicables para el pago del comprobante fiscal digital por "
            "Internet. Este atributo puede ser condicionado mediante atributos"
            " o complementos."
        ),
    )

    l10n_mx_cfdi4_0_sub_total = fields.Char(
        string="SubTotal",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para representar la suma de los importes de "
            "los conceptos antes de descuentos e impuesto. No se permiten "
            "valores negativos."
        ),
    )

    l10n_mx_cfdi4_0_descuento = fields.Char(
        string="Descuento",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo condicional para representar el importe total de los "
            "descuentos aplicables antes de impuestos. No se permiten valores "
            "negativos. Se debe registrar cuando existan conceptos con "
            "descuento."
        ),
    )

    l10n_mx_cfdi4_0_moneda = fields.Char(
        string="Moneda",
        xsd_required=True,
        xsd_type="catCFDI:c_Moneda",
        help=(
            "Atributo requerido para identificar la clave de la moneda "
            "utilizada para expresar los montos, cuando se usa moneda nacional"
            " se registra MXN. Conforme con la especificación ISO 4217."
        ),
    )

    l10n_mx_cfdi4_0_tipo_cambio = fields.Float(
        string="TipoCambio",
        help=(
            "Atributo condicional para representar el tipo de cambio FIX "
            "conforme con la moneda usada. Es requerido cuando la clave de "
            "moneda es distinta de MXN y de XXX. El valor debe reflejar el "
            "número de pesos mexicanos que equivalen a una unidad de la divisa"
            " señalada en el atributo moneda. Si el valor está fuera del "
            "porcentaje aplicable a la moneda tomado del catálogo c_Moneda, el"
            " emisor debe obtener del PAC que vaya a timbrar el CFDI, de "
            "manera no automática, una clave de confirmación para ratificar "
            "que el valor es correcto e integrar dicha clave en el atributo "
            "Confirmacion."
        ),
    )

    l10n_mx_cfdi4_0_total = fields.Char(
        string="Total",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para representar la suma del subtotal, menos "
            "los descuentos aplicables, más las contribuciones recibidas "
            "(impuestos trasladados - federales y/o locales, derechos, "
            "productos, aprovechamientos, aportaciones de seguridad social, "
            "contribuciones de mejoras) menos los impuestos retenidos "
            "federales y/o locales. Si el valor es superior al límite que "
            "establezca el SAT en la Resolución Miscelánea Fiscal vigente, el "
            "emisor debe obtener del PAC que vaya a timbrar el CFDI, de manera"
            " no automática, una clave de confirmación para ratificar que el "
            "valor es correcto e integrar dicha clave en el atributo "
            "Confirmacion. No se permiten valores negativos."
        ),
    )

    l10n_mx_cfdi4_0_tipo_de_comprobante = fields.Char(
        string="TipoDeComprobante",
        xsd_required=True,
        xsd_type="catCFDI:c_TipoDeComprobante",
        help=(
            "Atributo requerido para expresar la clave del efecto del "
            "comprobante fiscal para el contribuyente emisor."
        ),
    )

    l10n_mx_cfdi4_0_exportacion = fields.Char(
        string="Exportacion",
        xsd_required=True,
        xsd_type="catCFDI:c_Exportacion",
        help=(
            "Atributo requerido para expresar si el comprobante ampara una "
            "operación de exportación."
        ),
    )

    l10n_mx_cfdi4_0_metodo_pago = fields.Char(
        string="MetodoPago",
        xsd_type="catCFDI:c_MetodoPago",
        help=(
            "Atributo condicional para precisar la clave del método de pago "
            "que aplica para este comprobante fiscal digital por Internet, "
            "conforme al Artículo 29-A fracción VII incisos a y b del CFF."
        ),
    )

    l10n_mx_cfdi4_0_lugar_expedicion = fields.Char(
        string="LugarExpedicion",
        xsd_required=True,
        xsd_type="catCFDI:c_CodigoPostal",
        help=(
            "Atributo requerido para incorporar el código postal del lugar de "
            "expedición del comprobante (domicilio de la matriz o de la "
            "sucursal)."
        ),
    )

    l10n_mx_cfdi4_0_confirmacion = fields.Char(
        string="Confirmacion",
        help=(
            "Atributo condicional para registrar la clave de confirmación que "
            "entregue el PAC para expedir el comprobante con importes grandes,"
            " con un tipo de cambio fuera del rango establecido o con ambos "
            "casos. Es requerido cuando se registra un tipo de cambio o un "
            "total fuera del rango establecido."
        ),
    )


class InformacionGlobal(models.AbstractModel):
    """Nodo condicional para precisar la información relacionada con el
    comprobante global."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.informacionglobal"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.InformacionGlobal"

    l10n_mx_cfdi4_0_periodicidad = fields.Char(
        string="Periodicidad",
        xsd_required=True,
        xsd_type="catCFDI:c_Periodicidad",
        help=(
            "Atributo requerido para expresar el período al que corresponde la"
            " información del comprobante global."
        ),
    )

    l10n_mx_cfdi4_0_meses = fields.Char(
        string="Meses",
        xsd_required=True,
        xsd_type="catCFDI:c_Meses",
        help=(
            "Atributo requerido para expresar el mes o los meses al que "
            "corresponde la información del comprobante global."
        ),
    )


class CfdiRelacionados(models.AbstractModel):
    """Nodo opcional para precisar la información de los comprobantes
    relacionados."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.cfdirelacionados"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.CfdiRelacionados"

    l10n_mx_cfdi4_0_cfdi_relacionados_comprobante_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.comprobante",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_cfdi_relacionado = fields.One2many(
        "l10n_mx_cfdi.4_0.cfdirelacionado",
        "l10n_mx_cfdi4_0_cfdi_relacionado_cfdi_relacionados_id",
        string="CfdiRelacionado",
        help=(
            "Nodo requerido para precisar la información de los comprobantes "
            "relacionados."
        ),
    )

    l10n_mx_cfdi4_0_tipo_relacion = fields.Char(
        string="TipoRelacion",
        xsd_required=True,
        xsd_type="catCFDI:c_TipoRelacion",
        help=(
            "Atributo requerido para indicar la clave de la relación que "
            "existe entre éste que se está generando y el o los CFDI previos."
        ),
    )


class CfdiRelacionado(models.AbstractModel):
    """Nodo requerido para precisar la información de los comprobantes
    relacionados."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.cfdirelacionado"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.CfdiRelacionados.CfdiRelacionado"

    l10n_mx_cfdi4_0_cfdi_relacionado_cfdi_relacionados_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.cfdirelacionados",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_uuid = fields.Char(
        string="UUID",
        xsd_required=True,
        help=(
            "Atributo requerido para registrar el folio fiscal (UUID) de un "
            "CFDI relacionado con el presente comprobante, por ejemplo: Si el "
            "CFDI relacionado es un comprobante de traslado que sirve para "
            "registrar el movimiento de la mercancía. Si este comprobante se "
            "usa como nota de crédito o nota de débito del comprobante "
            "relacionado. Si este comprobante es una devolución sobre el "
            "comprobante relacionado. Si éste sustituye a una factura "
            "cancelada."
        ),
    )


class Emisor(models.AbstractModel):
    """Nodo requerido para expresar la información del contribuyente emisor del
    comprobante."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.emisor"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Emisor"

    l10n_mx_cfdi4_0_rfc = fields.Char(
        string="Rfc",
        xsd_required=True,
        xsd_type="tdCFDI:t_RFC",
        help=(
            "Atributo requerido para registrar la Clave del Registro Federal "
            "de Contribuyentes correspondiente al contribuyente emisor del "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_nombre = fields.Char(
        string="Nombre",
        xsd_required=True,
        help=(
            "Atributo requerido para registrar el nombre, denominación o razón"
            " social del contribuyente inscrito en el RFC, del emisor del "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_regimen_fiscal = fields.Char(
        string="RegimenFiscal",
        xsd_required=True,
        xsd_type="catCFDI:c_RegimenFiscal",
        help=(
            "Atributo requerido para incorporar la clave del régimen del "
            "contribuyente emisor al que aplicará el efecto fiscal de este "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_fac_atr_adquirente = fields.Char(
        string="FacAtrAdquirente",
        help=(
            "Atributo condicional para expresar el número de operación "
            "proporcionado por el SAT cuando se trate de un comprobante a "
            "través de un PCECFDI o un PCGCFDISP."
        ),
    )


class Receptor(models.AbstractModel):
    """Nodo requerido para precisar la información del contribuyente receptor
    del comprobante."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.receptor"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Receptor"

    l10n_mx_cfdi4_0_rfc = fields.Char(
        string="Rfc",
        xsd_required=True,
        xsd_type="tdCFDI:t_RFC",
        help=(
            "Atributo requerido para registrar la Clave del Registro Federal "
            "de Contribuyentes correspondiente al contribuyente receptor del "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_nombre = fields.Char(
        string="Nombre",
        xsd_required=True,
        help=(
            "Atributo requerido para registrar el nombre(s), primer apellido, "
            "segundo apellido, según corresponda, denominación o razón social "
            "del contribuyente, inscrito en el RFC, del receptor del "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_domicilio_fiscal_receptor = fields.Char(
        string="DomicilioFiscalReceptor",
        xsd_required=True,
        help=(
            "Atributo requerido para registrar el código postal del domicilio "
            "fiscal del receptor del comprobante."
        ),
    )

    l10n_mx_cfdi4_0_residencia_fiscal = fields.Char(
        string="ResidenciaFiscal",
        xsd_type="catCFDI:c_Pais",
        help=(
            "Atributo condicional para registrar la clave del país de "
            "residencia para efectos fiscales del receptor del comprobante, "
            "cuando se trate de un extranjero, y que es conforme con la "
            "especificación ISO 3166-1 alpha-3. Es requerido cuando se incluya"
            " el complemento de comercio exterior o se registre el atributo "
            "NumRegIdTrib."
        ),
    )

    l10n_mx_cfdi4_0_num_reg_id_trib = fields.Char(
        string="NumRegIdTrib",
        help=(
            "Atributo condicional para expresar el número de registro de "
            "identidad fiscal del receptor cuando sea residente en el "
            "extranjero. Es requerido cuando se incluya el complemento de "
            "comercio exterior."
        ),
    )

    l10n_mx_cfdi4_0_regimen_fiscal_receptor = fields.Char(
        string="RegimenFiscalReceptor",
        xsd_required=True,
        xsd_type="catCFDI:c_RegimenFiscal",
        help=(
            "Atributo requerido para incorporar la clave del régimen fiscal "
            "del contribuyente receptor al que aplicará el efecto fiscal de "
            "este comprobante."
        ),
    )

    l10n_mx_cfdi4_0_uso_cfdi = fields.Char(
        string="UsoCFDI",
        xsd_required=True,
        xsd_type="catCFDI:c_UsoCFDI",
        help=(
            "Atributo requerido para expresar la clave del uso que dará a esta"
            " factura el receptor del CFDI."
        ),
    )


class Conceptos(models.AbstractModel):
    """Nodo requerido para listar los conceptos cubiertos por el
    comprobante."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.conceptos"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos"

    l10n_mx_cfdi4_0_concepto = fields.One2many(
        "l10n_mx_cfdi.4_0.concepto",
        "l10n_mx_cfdi4_0_concepto_conceptos_id",
        string="Concepto",
        help=(
            "Nodo requerido para registrar la información detallada de un bien"
            " o servicio amparado en el comprobante."
        ),
    )


class Concepto(models.AbstractModel):
    """Nodo requerido para registrar la información detallada de un bien o
    servicio amparado en el comprobante."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.concepto"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto"

    l10n_mx_cfdi4_0_concepto_conceptos_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.conceptos", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_impuestos = fields.Many2one(
        string="Impuestos",
        comodel_name="l10n_mx_cfdi.4_0.concepto_impuestos",
        help=(
            "Nodo condicional para capturar los impuestos aplicables al "
            "presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_acuenta_terceros = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.acuentaterceros",
        string="ACuentaTerceros",
        help=(
            "Nodo opcional para registrar información del contribuyente "
            "Tercero, a cuenta del que se realiza la operación."
        ),
    )

    l10n_mx_cfdi4_0_informacion_aduanera = fields.One2many(
        "l10n_mx_cfdi.4_0.concepto_informacionaduanera",
        "l10n_mx_cfdi4_0_informacion_aduanera_concepto_id",
        string="InformacionAduanera",
        help=(
            "Nodo opcional para introducir la información aduanera aplicable "
            "cuando se trate de ventas de primera mano de mercancías "
            "importadas o se trate de operaciones de comercio exterior con "
            "bienes o servicios."
        ),
    )

    l10n_mx_cfdi4_0_cuenta_predial = fields.One2many(
        "l10n_mx_cfdi.4_0.cuentapredial",
        "l10n_mx_cfdi4_0_cuenta_predial_concepto_id",
        string="CuentaPredial",
        help=(
            "Nodo opcional para asentar el número de cuenta predial con el que"
            " fue registrado el inmueble, en el sistema catastral de la "
            "entidad federativa de que trate, o bien para incorporar los datos"
            " de identificación del certificado de participación inmobiliaria "
            "no amortizable."
        ),
    )

    l10n_mx_cfdi4_0_complemento_concepto = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.complementoconcepto",
        string="ComplementoConcepto",
        help=(
            "Nodo opcional donde se incluyen los nodos complementarios de "
            "extensión al concepto definidos por el SAT, de acuerdo con las "
            "disposiciones particulares para un sector o actividad específica."
        ),
    )

    l10n_mx_cfdi4_0_parte = fields.One2many(
        "l10n_mx_cfdi.4_0.parte",
        "l10n_mx_cfdi4_0_parte_concepto_id",
        string="Parte",
        help=(
            "Nodo opcional para expresar las partes o componentes que integran"
            " la totalidad del concepto expresado en el comprobante fiscal "
            "digital por Internet."
        ),
    )

    l10n_mx_cfdi4_0_clave_prod_serv = fields.Char(
        string="ClaveProdServ",
        xsd_required=True,
        xsd_type="catCFDI:c_ClaveProdServ",
        help=(
            "Atributo requerido para expresar la clave del producto o del "
            "servicio amparado por el presente concepto. Es requerido y deben "
            "utilizar las claves del catálogo de productos y servicios, cuando"
            " los conceptos que registren por sus actividades correspondan con"
            " dichos conceptos."
        ),
    )

    l10n_mx_cfdi4_0_no_identificacion = fields.Char(
        string="NoIdentificacion",
        help=(
            "Atributo opcional para expresar el número de parte, identificador"
            " del producto o del servicio, la clave de producto o servicio, "
            "SKU o equivalente, propia de la operación del emisor, amparado "
            "por el presente concepto. Opcionalmente se puede utilizar claves "
            "del estándar GTIN."
        ),
    )

    l10n_mx_cfdi4_0_cantidad = fields.Float(
        string="Cantidad",
        xsd_required=True,
        help=(
            "Atributo requerido para precisar la cantidad de bienes o "
            "servicios del tipo particular definido por el presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_clave_unidad = fields.Char(
        string="ClaveUnidad",
        xsd_required=True,
        xsd_type="catCFDI:c_ClaveUnidad",
        help=(
            "Atributo requerido para precisar la clave de unidad de medida "
            "estandarizada aplicable para la cantidad expresada en el "
            "concepto. La unidad debe corresponder con la descripción del "
            "concepto."
        ),
    )

    l10n_mx_cfdi4_0_unidad = fields.Char(
        string="Unidad",
        help=(
            "Atributo opcional para precisar la unidad de medida propia de la "
            "operación del emisor, aplicable para la cantidad expresada en el "
            "concepto. La unidad debe corresponder con la descripción del "
            "concepto."
        ),
    )

    l10n_mx_cfdi4_0_descripcion = fields.Char(
        string="Descripcion",
        xsd_required=True,
        help=(
            "Atributo requerido para precisar la descripción del bien o "
            "servicio cubierto por el presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_valor_unitario = fields.Char(
        string="ValorUnitario",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para precisar el valor o precio unitario del "
            "bien o servicio cubierto por el presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para precisar el importe total de los bienes o"
            " servicios del presente concepto. Debe ser equivalente al "
            "resultado de multiplicar la cantidad por el valor unitario "
            "expresado en el concepto. No se permiten valores negativos."
        ),
    )

    l10n_mx_cfdi4_0_descuento = fields.Char(
        string="Descuento",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo opcional para representar el importe de los descuentos "
            "aplicables al concepto. No se permiten valores negativos."
        ),
    )

    l10n_mx_cfdi4_0_objeto_imp = fields.Char(
        string="ObjetoImp",
        xsd_required=True,
        xsd_type="catCFDI:c_ObjetoImp",
        help=(
            "Atributo requerido para expresar si la operación comercial es "
            "objeto o no de impuesto."
        ),
    )


class ConceptoImpuestos(models.AbstractModel):
    """Nodo condicional para capturar los impuestos aplicables al presente
    concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.concepto_impuestos"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Impuestos"

    l10n_mx_cfdi4_0_traslados = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.traslados",
        string="Traslados",
        help=(
            "Nodo opcional para asentar los impuestos trasladados aplicables "
            "al presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_retenciones = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        string="Retenciones",
        help=(
            "Nodo opcional para asentar los impuestos retenidos aplicables al "
            "presente concepto."
        ),
    )


class Traslados(models.AbstractModel):
    """Nodo opcional para asentar los impuestos trasladados aplicables al
    presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.traslados"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Impuestos.Traslados"

    l10n_mx_cfdi4_0_traslado = fields.One2many(
        "l10n_mx_cfdi.4_0.traslado",
        "l10n_mx_cfdi4_0_traslado_traslados_id",
        string="Traslado",
        help=(
            "Nodo requerido para asentar la información detallada de un "
            "traslado de impuestos aplicable al presente concepto."
        ),
    )


class Traslado(models.AbstractModel):
    """Nodo requerido para asentar la información detallada de un traslado de
    impuestos aplicable al presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.traslado"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Impuestos.Traslados.Traslado"

    l10n_mx_cfdi4_0_traslado_traslados_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.traslados", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_base = fields.Float(
        string="Base",
        xsd_required=True,
        help=(
            "Atributo requerido para señalar la base para el cálculo del "
            "impuesto, la determinación de la base se realiza de acuerdo con "
            "las disposiciones fiscales vigentes. No se permiten valores "
            "negativos."
        ),
    )

    l10n_mx_cfdi4_0_impuesto = fields.Char(
        string="Impuesto",
        xsd_required=True,
        xsd_type="catCFDI:c_Impuesto",
        help=(
            "Atributo requerido para señalar la clave del tipo de impuesto "
            "trasladado aplicable al concepto."
        ),
    )

    l10n_mx_cfdi4_0_tipo_factor = fields.Char(
        string="TipoFactor",
        xsd_required=True,
        xsd_type="catCFDI:c_TipoFactor",
        help=(
            "Atributo requerido para señalar la clave del tipo de factor que "
            "se aplica a la base del impuesto."
        ),
    )

    l10n_mx_cfdi4_0_tasa_ocuota = fields.Float(
        string="TasaOCuota",
        help=(
            "Atributo condicional para señalar el valor de la tasa o cuota del"
            " impuesto que se traslada para el presente concepto. Es requerido"
            " cuando el atributo TipoFactor tenga una clave que corresponda a "
            "Tasa o Cuota."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo condicional para señalar el importe del impuesto "
            "trasladado que aplica al concepto. No se permiten valores "
            "negativos. Es requerido cuando TipoFactor sea Tasa o Cuota."
        ),
    )


class Retenciones(models.AbstractModel):
    """Nodo opcional para asentar los impuestos retenidos aplicables al
    presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.retenciones"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Impuestos.Retenciones"

    l10n_mx_cfdi4_0_retencion = fields.One2many(
        "l10n_mx_cfdi.4_0.concepto_retencion",
        "l10n_mx_cfdi4_0_retencion_retenciones_id",
        string="Retencion",
        help=(
            "Nodo requerido para asentar la información detallada de una "
            "retención de impuestos aplicable al presente concepto."
        ),
    )


class ConceptoRetencion(models.AbstractModel):
    """Nodo requerido para asentar la información detallada de una retención de
    impuestos aplicable al presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.concepto_retencion"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Impuestos.Retenciones.Retencion"

    l10n_mx_cfdi4_0_retencion_retenciones_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_retencion_retenciones_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_base = fields.Float(
        string="Base",
        xsd_required=True,
        help=(
            "Atributo requerido para señalar la base para el cálculo de la "
            "retención, la determinación de la base se realiza de acuerdo con "
            "las disposiciones fiscales vigentes. No se permiten valores "
            "negativos."
        ),
    )

    l10n_mx_cfdi4_0_impuesto = fields.Char(
        string="Impuesto",
        xsd_required=True,
        xsd_type="catCFDI:c_Impuesto",
        help=(
            "Atributo requerido para señalar la clave del tipo de impuesto "
            "retenido aplicable al concepto."
        ),
    )

    l10n_mx_cfdi4_0_tipo_factor = fields.Char(
        string="TipoFactor",
        xsd_required=True,
        xsd_type="catCFDI:c_TipoFactor",
        help=(
            "Atributo requerido para señalar la clave del tipo de factor que "
            "se aplica a la base del impuesto."
        ),
    )

    l10n_mx_cfdi4_0_tasa_ocuota = fields.Float(
        string="TasaOCuota",
        xsd_required=True,
        help=(
            "Atributo requerido para señalar la tasa o cuota del impuesto que "
            "se retiene para el presente concepto."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para señalar el importe del impuesto retenido "
            "que aplica al concepto. No se permiten valores negativos."
        ),
    )


class AcuentaTerceros(models.AbstractModel):
    """Nodo opcional para registrar información del contribuyente Tercero, a
    cuenta del que se realiza la operación."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.acuentaterceros"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.AcuentaTerceros"

    l10n_mx_cfdi4_0_rfc_acuenta_terceros = fields.Char(
        string="RfcACuentaTerceros",
        xsd_required=True,
        xsd_type="tdCFDI:t_RFC",
        help=(
            "Atributo requerido para registrar la Clave del Registro Federal "
            "de Contribuyentes del contribuyente Tercero, a cuenta del que se "
            "realiza la operación."
        ),
    )

    l10n_mx_cfdi4_0_nombre_acuenta_terceros = fields.Char(
        string="NombreACuentaTerceros",
        xsd_required=True,
        help=(
            "Atributo requerido para registrar el nombre, denominación o razón"
            " social del contribuyente Tercero correspondiente con el Rfc, a "
            "cuenta del que se realiza la operación."
        ),
    )

    l10n_mx_cfdi4_0_regimen_fiscal_acuenta_terceros = fields.Char(
        string="RegimenFiscalACuentaTerceros",
        xsd_required=True,
        xsd_type="catCFDI:c_RegimenFiscal",
        help=(
            "Atributo requerido para incorporar la clave del régimen del "
            "contribuyente Tercero, a cuenta del que se realiza la operación."
        ),
    )

    l10n_mx_cfdi4_0_domicilio_fiscal_acuenta_terceros = fields.Char(
        string="DomicilioFiscalACuentaTerceros",
        xsd_required=True,
        help=(
            "Atributo requerido para incorporar el código postal del domicilio"
            " fiscal del Tercero, a cuenta del que se realiza la operación."
        ),
    )


class ConceptoInformacionAduanera(models.AbstractModel):
    """Nodo opcional para introducir la información aduanera aplicable cuando
    se trate de ventas de primera mano de mercancías importadas o se trate
    de operaciones de comercio exterior con bienes o servicios."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.concepto_informacionaduanera"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.InformacionAduanera"

    l10n_mx_cfdi4_0_informacion_aduanera_concepto_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.concepto", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_informacion_aduanera_parte_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.parte", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_numero_pedimento = fields.Char(
        string="NumeroPedimento",
        xsd_required=True,
        help=(
            "Atributo requerido para expresar el número del pedimento que "
            "ampara la importación del bien que se expresa en el siguiente "
            "formato: últimos 2 dígitos del año de validación seguidos por dos"
            " espacios, 2 dígitos de la aduana de despacho seguidos por dos "
            "espacios, 4 dígitos del número de la patente seguidos por dos "
            "espacios, 1 dígito que corresponde al último dígito del año en "
            "curso, salvo que se trate de un pedimento consolidado iniciado en"
            " el año inmediato anterior o del pedimento original de una "
            "rectificación, seguido de 6 dígitos de la numeración progresiva "
            "por aduana."
        ),
    )


class CuentaPredial(models.AbstractModel):
    """Nodo opcional para asentar el número de cuenta predial con el que fue
    registrado el inmueble, en el sistema catastral de la entidad
    federativa de que trate, o bien para incorporar los datos de
    identificación del certificado de participación inmobiliaria no
    amortizable."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.cuentapredial"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.CuentaPredial"

    l10n_mx_cfdi4_0_cuenta_predial_concepto_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.concepto", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_numero = fields.Char(
        string="Numero",
        xsd_required=True,
        help=(
            "Atributo requerido para precisar el número de la cuenta predial "
            "del inmueble cubierto por el presente concepto, o bien para "
            "incorporar los datos de identificación del certificado de "
            "participación inmobiliaria no amortizable, tratándose de "
            "arrendamiento."
        ),
    )


class ComplementoConcepto(models.AbstractModel):
    """Nodo opcional donde se incluyen los nodos complementarios de extensión
    al concepto definidos por el SAT, de acuerdo con las disposiciones
    particulares para un sector o actividad específica."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.complementoconcepto"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.ComplementoConcepto"


class Parte(models.AbstractModel):
    """Nodo opcional para expresar las partes o componentes que integran la
    totalidad del concepto expresado en el comprobante fiscal digital por
    Internet."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.parte"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Parte"

    l10n_mx_cfdi4_0_parte_concepto_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.concepto", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_informacion_aduanera = fields.One2many(
        "l10n_mx_cfdi.4_0.informacionaduanera",
        "l10n_mx_cfdi4_0_informacion_aduanera_parte_id",
        string="InformacionAduanera",
        help=(
            "Nodo opcional para introducir la información aduanera aplicable "
            "cuando se trate de ventas de primera mano de mercancías "
            "importadas o se trate de operaciones de comercio exterior con "
            "bienes o servicios."
        ),
    )

    l10n_mx_cfdi4_0_clave_prod_serv = fields.Char(
        string="ClaveProdServ",
        xsd_required=True,
        xsd_type="catCFDI:c_ClaveProdServ",
        help=(
            "Atributo requerido para expresar la clave del producto o del "
            "servicio amparado por la presente parte. Es requerido y deben "
            "utilizar las claves del catálogo de productos y servicios, cuando"
            " los conceptos que registren por sus actividades correspondan con"
            " dichos conceptos."
        ),
    )

    l10n_mx_cfdi4_0_no_identificacion = fields.Char(
        string="NoIdentificacion",
        help=(
            "Atributo opcional para expresar el número de serie, número de "
            "parte del bien o identificador del producto o del servicio "
            "amparado por la presente parte. Opcionalmente se puede utilizar "
            "claves del estándar GTIN."
        ),
    )

    l10n_mx_cfdi4_0_cantidad = fields.Float(
        string="Cantidad",
        xsd_required=True,
        help=(
            "Atributo requerido para precisar la cantidad de bienes o "
            "servicios del tipo particular definido por la presente parte."
        ),
    )

    l10n_mx_cfdi4_0_unidad = fields.Char(
        string="Unidad",
        help=(
            "Atributo opcional para precisar la unidad de medida propia de la "
            "operación del emisor, aplicable para la cantidad expresada en la "
            "parte. La unidad debe corresponder con la descripción de la "
            "parte."
        ),
    )

    l10n_mx_cfdi4_0_descripcion = fields.Char(
        string="Descripcion",
        xsd_required=True,
        help=(
            "Atributo requerido para precisar la descripción del bien o "
            "servicio cubierto por la presente parte."
        ),
    )

    l10n_mx_cfdi4_0_valor_unitario = fields.Char(
        string="ValorUnitario",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo opcional para precisar el valor o precio unitario del "
            "bien o servicio cubierto por la presente parte. No se permiten "
            "valores negativos."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo opcional para precisar el importe total de los bienes o "
            "servicios de la presente parte. Debe ser equivalente al resultado"
            " de multiplicar la cantidad por el valor unitario expresado en la"
            " parte. No se permiten valores negativos."
        ),
    )


class InformacionAduanera(models.AbstractModel):
    _description = "InformacionAduanera"
    _name = "l10n_mx_cfdi.4_0.informacionaduanera"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Conceptos.Concepto.Parte.InformacionAduanera"

    l10n_mx_cfdi4_0_informacion_aduanera_concepto_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.concepto", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_informacion_aduanera_parte_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.parte", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_numero_pedimento = fields.Char(
        string="NumeroPedimento",
        xsd_required=True,
        help=(
            "Atributo requerido para expresar el número del pedimento que "
            "ampara la importación del bien que se expresa en el siguiente "
            "formato: últimos 2 dígitos del año de validación seguidos por dos"
            " espacios, 2 dígitos de la aduana de despacho seguidos por dos "
            "espacios, 4 dígitos del número de la patente seguidos por dos "
            "espacios, 1 dígito que corresponde al último dígito del año en "
            "curso, salvo que se trate de un pedimento consolidado iniciado en"
            " el año inmediato anterior o del pedimento original de una "
            "rectificación, seguido de 6 dígitos de la numeración progresiva "
            "por aduana."
        ),
    )


class Impuestos(models.AbstractModel):
    """Nodo condicional para capturar los impuestos aplicables al presente
    concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.impuestos"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Impuestos"

    l10n_mx_cfdi4_0_retenciones = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        string="Retenciones",
        help=(
            "Nodo condicional para capturar los impuestos retenidos "
            "aplicables. Es requerido cuando en los conceptos se registre "
            "algún impuesto retenido."
        ),
    )

    l10n_mx_cfdi4_0_traslados = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.traslados",
        string="Traslados",
        help=(
            "Nodo condicional para capturar los impuestos trasladados "
            "aplicables. Es requerido cuando en los conceptos se registre un "
            "impuesto trasladado."
        ),
    )

    l10n_mx_cfdi4_0_total_impuestos_retenidos = fields.Char(
        string="TotalImpuestosRetenidos",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo condicional para expresar el total de los impuestos "
            "retenidos que se desprenden de los conceptos expresados en el "
            "comprobante fiscal digital por Internet. No se permiten valores "
            "negativos. Es requerido cuando en los conceptos se registren "
            "impuestos retenidos."
        ),
    )

    l10n_mx_cfdi4_0_total_impuestos_trasladados = fields.Char(
        string="TotalImpuestosTrasladados",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo condicional para expresar el total de los impuestos "
            "trasladados que se desprenden de los conceptos expresados en el "
            "comprobante fiscal digital por Internet. No se permiten valores "
            "negativos. Es requerido cuando en los conceptos se registren "
            "impuestos trasladados."
        ),
    )


class Retenciones(models.AbstractModel):
    """Nodo opcional para asentar los impuestos retenidos aplicables al
    presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.retenciones"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Impuestos.Retenciones"

    l10n_mx_cfdi4_0_retencion = fields.One2many(
        "l10n_mx_cfdi.4_0.retencion",
        "l10n_mx_cfdi4_0_retencion_retenciones_id",
        string="Retencion",
        help=(
            "Nodo requerido para la información detallada de una retención de "
            "impuesto específico."
        ),
    )


class Retencion(models.AbstractModel):
    """Nodo requerido para asentar la información detallada de una retención de
    impuestos aplicable al presente concepto."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.retencion"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Impuestos.Retenciones.Retencion"

    l10n_mx_cfdi4_0_retencion_retenciones_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_retencion_retenciones_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.retenciones",
        xsd_implicit=True,
        ondelete="cascade",
    )
    l10n_mx_cfdi4_0_impuesto = fields.Char(
        string="Impuesto",
        xsd_required=True,
        xsd_type="catCFDI:c_Impuesto",
        help=(
            "Atributo requerido para señalar la clave del tipo de impuesto " "retenido."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_required=True,
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo requerido para señalar el monto del impuesto retenido. "
            "No se permiten valores negativos."
        ),
    )


class Traslados(models.AbstractModel):
    _description = "Traslados"
    _name = "l10n_mx_cfdi.4_0.traslados"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Impuestos.Traslados"

    l10n_mx_cfdi4_0_traslado = fields.One2many(
        "l10n_mx_cfdi.4_0.traslado",
        "l10n_mx_cfdi4_0_traslado_traslados_id",
        string="Traslado",
        help=(
            "Nodo requerido para la información detallada de un traslado de "
            "impuesto específico."
        ),
    )


class Traslado(models.AbstractModel):
    _description = "Traslado"
    _name = "l10n_mx_cfdi.4_0.traslado"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Impuestos.Traslados.Traslado"

    l10n_mx_cfdi4_0_traslado_traslados_id = fields.Many2one(
        comodel_name="l10n_mx_cfdi.4_0.traslados", xsd_implicit=True, ondelete="cascade"
    )
    l10n_mx_cfdi4_0_base = fields.Char(
        string="Base",
        xsd_required=True,
        help=(
            "Atributo requerido para señalar la suma de los atributos Base de "
            "los conceptos del impuesto trasladado. No se permiten valores "
            "negativos."
        ),
    )

    l10n_mx_cfdi4_0_impuesto = fields.Char(
        string="Impuesto",
        xsd_required=True,
        xsd_type="catCFDI:c_Impuesto",
        help=(
            "Atributo requerido para señalar la clave del tipo de impuesto "
            "trasladado."
        ),
    )

    l10n_mx_cfdi4_0_tipo_factor = fields.Char(
        string="TipoFactor",
        xsd_required=True,
        xsd_type="catCFDI:c_TipoFactor",
        help=(
            "Atributo requerido para señalar la clave del tipo de factor que "
            "se aplica a la base del impuesto."
        ),
    )

    l10n_mx_cfdi4_0_tasa_ocuota = fields.Float(
        string="TasaOCuota",
        help=(
            "Atributo condicional para señalar el valor de la tasa o cuota del"
            " impuesto que se traslada por los conceptos amparados en el "
            "comprobante."
        ),
    )

    l10n_mx_cfdi4_0_importe = fields.Char(
        string="Importe",
        xsd_type="tdCFDI:t_Importe",
        help=(
            "Atributo condicional para señalar la suma del importe del "
            "impuesto trasladado, agrupado por impuesto, TipoFactor y "
            "TasaOCuota. No se permiten valores negativos."
        ),
    )


class Complemento(models.AbstractModel):
    """Nodo opcional donde se incluye el complemento Timbre Fiscal Digital de
    manera obligatoria y los nodos complementarios determinados por el SAT,
    de acuerdo con las disposiciones particulares para un sector o
    actividad específica."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.complemento"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Complemento"


class Addenda(models.AbstractModel):
    """Nodo opcional para recibir las extensiones al presente formato que sean
    de utilidad al contribuyente. Para las reglas de uso del mismo,
    referirse al formato origen."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_mx_cfdi.4_0.addenda"
    _inherit = "spec.mixin.l10n_mx_cfdi"
    _binding_type = "Comprobante.Addenda"
