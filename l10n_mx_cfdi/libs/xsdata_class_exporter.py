import logging
from decimal import Decimal

_logger = logging.getLogger("xsdata_class_importer")


class XSDataClassExporter:
    """
    This class is used to export Odoo models into the classes generated by
    xsdata
    """

    odoo_env = None
    xsdata_class = None
    odoo_fields_prefix = None

    def __init__(self, odoo_env, xsdata_class, odoo_fields_prefix):
        self.odoo_env = odoo_env
        self.xsdata_class = xsdata_class
        self.odoo_fields_prefix = odoo_fields_prefix

    def export_obj(self, rec):
        """
        Transform an Odoo record into a xsdata generated class object
        """
        obj = self._map_fields(rec, self.xsdata_class)

        return obj

    def _map_fields(self, rec, xsdata_class):
        """
        Map the fields of an Odoo record to a xsdata class object. Nested
        object will be created if needed.
        """

        obj = xsdata_class()
        for field_name, field_value in obj.__dict__.items():
            obj_field_value = self._map_field(field_name, rec, xsdata_class)
            if obj_field_value:
                obj.__setattr__(field_name, obj_field_value)

        return obj or None

    def _map_field(self, field_name, rec, xsdata_class):
        odoo_field_name = self.odoo_fields_prefix + field_name
        odoo_field = rec._fields[odoo_field_name]
        odoo_field_value = rec[odoo_field_name]
        if not odoo_field_value:
            # early return if the field value is empty
            return None

        odoo_field_type = odoo_field.type

        if odoo_field_type == "many2one":
            # get _binding_type property from the field model
            comodel = self.odoo_env[odoo_field.comodel_name]
            binding_type = comodel._binding_type

            xsdata_field_class = self._resolve_xsdata_class(binding_type)
            nested_obj = self._map_fields(odoo_field_value, xsdata_field_class)
            return nested_obj

        if odoo_field_type == "one2many":
            comodel = self.odoo_env[odoo_field.comodel_name]
            binding_type = comodel._binding_type
            xsdata_field_class = self._resolve_xsdata_class(binding_type)
            objs = []

            for entry in odoo_field_value:
                nested_obj = self._map_fields(entry, xsdata_field_class)
                objs.append(nested_obj)

            return objs

        if odoo_field_type == "many2many":
            _logger.warning("many2many fields are not supported yet")

        if odoo_field_type == "char":
            return str(odoo_field_value)

        if odoo_field_type == "float":
            return Decimal(str(odoo_field_value))

        return None

    def _resolve_xsdata_class(self, binding_type):
        """
        Resolve the xsdata class for a given binding type
        """

        parts = binding_type.split(".")[1:]
        xsdata_class = self.xsdata_class
        while parts:
            part = parts.pop(0)
            xsdata_class = getattr(xsdata_class, part)

        return xsdata_class
