import logging

from odoo import fields

_logger = logging.getLogger("xsdata_class_importer")


class XSDataClassImporter:
    """
    This class is used to import the classes generated by xsdata
    into Odoo models
    """

    odoo_env = None
    odoo_model = None
    odoo_fields_prefix = None

    def __init__(self, odoo_env, odoo_model, odoo_fields_prefix):
        self.odoo_env = odoo_env
        self.odoo_model = odoo_model
        self.odoo_fields_prefix = odoo_fields_prefix

    def import_obj(self, obj: any):
        """
        Transform from xsdata generated class object into and Odoo record
        """

        rec_data = self._map_fields(obj, self.odoo_model)
        rec = self.odoo_model.create(rec_data)
        return rec

    def _map_fields(self, obj, odoo_model):
        """
        Map the fields of a xsdata class object to an odoo initialization
        dictionary. Nested object will be created if needed.
        """

        rec_data = {}
        for field_name, field_value in obj.__dict__.items():
            odoo_field_name = self.odoo_fields_prefix + field_name
            odoo_field_value = self._map_field(field_name, obj, odoo_model)
            if field_value and odoo_field_value:
                rec_data[odoo_field_name] = odoo_field_value

        return rec_data or None

    def _map_field(self, field_name, obj, odoo_model):
        """
        Map a field value from a xsdata class object to an odoo initialization
        dictionary
        """
        field_value = obj.__getattribute__(field_name)
        odoo_field_name = self.odoo_fields_prefix + field_name

        if not field_value:
            # early return if the field value is empty
            return None

        try:
            odoo_field = odoo_model._fields[odoo_field_name]
        except KeyError:
            raise KeyError(
                f"Field {odoo_field_name} not found in model {odoo_model._name}"
            )

        if odoo_field.type == "many2one":
            odoo_field_model = self.odoo_env[odoo_field.comodel_name]
            odoo_field_data = self._map_fields(field_value, odoo_field_model)
            if odoo_field_data:
                rec = odoo_field_model.create(odoo_field_data)
                return rec.ids[0]

        if odoo_field.type == "one2many":
            odoo_field_model = self.odoo_env[odoo_field.comodel_name]
            new_records = self.odoo_env[odoo_field.comodel_name]
            for field_value_item in field_value:
                entry = self._map_fields(field_value_item, odoo_field_model)
                rec = odoo_field_model.create(entry)
                new_records |= rec

            if new_records:
                return [fields.Command.set(new_records.ids)]

        if odoo_field.type == "char":
            return str(field_value)

        if odoo_field.type == "float":
            return float(field_value)

        return None
