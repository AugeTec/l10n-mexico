class XSDataClassImporter:
    """
    This class is used to import the classes generated by xsdata
    into Odoo models
    """

    odoo_env = None
    odoo_model = None
    odoo_fields_prefix = None

    def __init__(self, odoo_env, odoo_model, odoo_fields_prefix):
        self.odoo_env = odoo_env
        self.odoo_model = odoo_model
        self.odoo_fields_prefix = odoo_fields_prefix

    def import_obj(self, comprobante: any):
        """
        Transform a object from xsdata generated class into a
        dictionary to be used in the `create` method of the model
        and create the record
        """

        fields_map = self._map_fields(comprobante, self.odoo_model)
        return self.odoo_model.create(fields_map)

    def _map_fields(self, obj, odoo_model):
        """
        Map the fields of a xsdata class object to an odoo initialization
        dictionary
        """

        model_data = {}
        for field_name, field_value in obj.__dict__.items():
            odoo_field_name = self.odoo_fields_prefix + field_name
            if field_value:
                model_data[odoo_field_name] = self._map_field(field_name, obj, odoo_model)

        return [(0, 0, model_data)]

    def _map_field(self, field_name, obj, odoo_model):
        """
        Map a field value from a xsdata class object to an odoo initialization
        dictionary
        """
        field_value = obj.__getattribute__(field_name)
        odoo_field_name = self.odoo_fields_prefix + field_name
        try:
            odoo_field = odoo_model._fields[odoo_field_name]
        except KeyError:
            raise KeyError(f"Field {odoo_field_name} not found in model {odoo_model._name}")

        if odoo_field.type == 'many2one':
            odoo_field_model = self.odoo_env[odoo_field.comodel_name]

            field_data = self._map_fields(field_value, odoo_field_model)
            return field_data

        if odoo_field.type == 'one2many':
            odoo_field_model = self.odoo_env[odoo_field.comodel_name]

            field_data = []
            for field_value_item in field_value:
                entry = self._map_fields(field_value_item, odoo_field_model)
                field_data.extend(entry)

            return field_data

        if odoo_field.type == 'char':
            return str(field_value)

        return field_value
